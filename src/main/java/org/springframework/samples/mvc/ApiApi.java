/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Error;
import org.openapitools.model.HttpTriggerJobCreateRequest;
import org.openapitools.model.SchedulerJob;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-03-30T19:18:45.329588+03:00[Asia/Jerusalem]")

@Validated
public interface ApiApi {

    /**
     * POST /api/internal/v1/scheduler/jobs/{jobIdOrUniqueName}/activate
     * activate job by job id or job unique name
     *
     * @param jobIdOrUniqueName the job id or job unique name (required)
     * @return OK (status code 200)
     *         or Invalid parameters (status code 400)
     *         or Invalid credentials (status code 401)
     *         or No permissions (status code 403)
     *         or Unknown job id (status code 404)
     *         or Internal Error (status code 500)
     */
    @RequestMapping(value = "/api/internal/v1/scheduler/jobs/{jobIdOrUniqueName}/activate",
        produces = "application/json",
        method = RequestMethod.POST)
    <ResponseEntity<SchedulerJob>> activateJob(@ApiParam(value = "the job id or job unique name",required=true) @PathVariable("jobIdOrUniqueName") String jobIdOrUniqueName, ServerWebExchange exchange);


    /**
     * PUT /api/internal/v1/scheduler/jobs/http
     * Create new job
     *
     * @param httpTriggerJobCreateRequest  (optional)
     * @return OK (status code 200)
     *         or Invalid credentials (status code 401)
     *         or No permissions (status code 403)
     *         or Internal Error (status code 500)
     */
    @ApiVirtual
    @ApiOperation(value = "", nickname = "createHttpJob", notes = "Create new job", response = SchedulerJob.class, authorizations = {
        @Authorization(value = "wib-jwt")
    }, tags={ "internal","jobs", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = SchedulerJob.class),
        @ApiResponse(code = 401, message = "Invalid credentials", response = Error.class),
        @ApiResponse(code = 403, message = "No permissions", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Error", response = Error.class) })
    @ApiImplicitParams({
    })
    @RequestMapping(value = "/api/internal/v1/scheduler/jobs/http",
        produces = "application/json",
        consumes = "application/json",
        method = RequestMethod.PUT)
    <ResponseEntity<SchedulerJob>> createHttpJob(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) Mono<HttpTriggerJobCreateRequest> httpTriggerJobCreateRequest, ServerWebExchange exchange);


    /**
     * POST /api/internal/v1/scheduler/jobs/{jobIdOrUniqueName}/deactivate
     * Deactivate job by job id or job unique name
     *
     * @param jobIdOrUniqueName the job id or job unique name (required)
     * @return OK (status code 200)
     *         or Invalid parameters (status code 400)
     *         or Invalid credentials (status code 401)
     *         or No permissions (status code 403)
     *         or Unknown job id (status code 404)
     *         or Internal Error (status code 500)
     */
    @ApiVirtual
    @ApiOperation(value = "", nickname = "deactivateJob", notes = "Deactivate job by job id or job unique name", response = SchedulerJob.class, authorizations = {
        @Authorization(value = "wib-jwt")
    }, tags={ "internal","jobs", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = SchedulerJob.class),
        @ApiResponse(code = 400, message = "Invalid parameters", response = Error.class),
        @ApiResponse(code = 401, message = "Invalid credentials", response = Error.class),
        @ApiResponse(code = 403, message = "No permissions", response = Error.class),
        @ApiResponse(code = 404, message = "Unknown job id", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Error", response = Error.class) })
    @ApiImplicitParams({
    })
    @RequestMapping(value = "/api/internal/v1/scheduler/jobs/{jobIdOrUniqueName}/deactivate",
        produces = "application/json",
        method = RequestMethod.POST)
    <ResponseEntity<SchedulerJob>> deactivateJob(@ApiParam(value = "the job id or job unique name",required=true) @PathVariable("jobIdOrUniqueName") String jobIdOrUniqueName, ServerWebExchange exchange);


    /**
     * DELETE /api/internal/v1/scheduler/jobs/{jobIdOrUniqueName}
     * Delete job by job id or job unique name
     *
     * @param jobIdOrUniqueName the job id or job unique name (required)
     * @return Scheduler job deleted (status code 204)
     *         or Invalid parameters (status code 400)
     *         or Invalid credentials (status code 401)
     *         or No permissions (status code 403)
     *         or Unknown job id (status code 404)
     *         or Internal Error (status code 500)
     */
    @ApiVirtual
    @ApiOperation(value = "", nickname = "deleteJob", notes = "Delete job by job id or job unique name", authorizations = {
        @Authorization(value = "wib-jwt")
    }, tags={ "internal","jobs", })
    @ApiResponses(value = {
        @ApiResponse(code = 204, message = "Scheduler job deleted"),
        @ApiResponse(code = 400, message = "Invalid parameters", response = Error.class),
        @ApiResponse(code = 401, message = "Invalid credentials", response = Error.class),
        @ApiResponse(code = 403, message = "No permissions", response = Error.class),
        @ApiResponse(code = 404, message = "Unknown job id", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Error", response = Error.class) })
    @ApiImplicitParams({
    })
    @RequestMapping(value = "/api/internal/v1/scheduler/jobs/{jobIdOrUniqueName}",
        produces = "application/json",
        method = RequestMethod.DELETE)
    <ResponseEntity<Void>> deleteJob(@ApiParam(value = "the job id or job unique name",required=true) @PathVariable("jobIdOrUniqueName") String jobIdOrUniqueName, ServerWebExchange exchange);


    /**
     * GET /api/internal/v1/scheduler/jobs/{jobIdOrUniqueName}
     * Get job by job id or job unique name
     *
     * @param jobIdOrUniqueName the job id or job unique name (required)
     * @return OK (status code 200)
     *         or Invalid parameters (status code 400)
     *         or Invalid credentials (status code 401)
     *         or No permissions (status code 403)
     *         or Unknown job id (status code 404)
     *         or Internal Error (status code 500)
     */
    @ApiVirtual
    @ApiOperation(value = "", nickname = "getJob", notes = "Get job by job id or job unique name", response = SchedulerJob.class, authorizations = {
        @Authorization(value = "wib-jwt")
    }, tags={ "internal","jobs", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = SchedulerJob.class),
        @ApiResponse(code = 400, message = "Invalid parameters", response = Error.class),
        @ApiResponse(code = 401, message = "Invalid credentials", response = Error.class),
        @ApiResponse(code = 403, message = "No permissions", response = Error.class),
        @ApiResponse(code = 404, message = "Unknown job id", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Error", response = Error.class) })
    @ApiImplicitParams({
    })
    @RequestMapping(value = "/api/internal/v1/scheduler/jobs/{jobIdOrUniqueName}",
        produces = "application/json",
        method = RequestMethod.GET)
    <ResponseEntity<SchedulerJob>> getJob(@ApiParam(value = "the job id or job unique name",required=true) @PathVariable("jobIdOrUniqueName") String jobIdOrUniqueName, ServerWebExchange exchange);


    /**
     * GET /api/internal/v1/scheduler/jobs
     * Get list of all jobs
     *
     * @return OK (status code 200)
     *         or Invalid parameters (status code 400)
     *         or Invalid credentials (status code 401)
     *         or No permissions (status code 403)
     *         or Unknown job id (status code 404)
     *         or Internal Error (status code 500)
     */
    @ApiVirtual
    @ApiOperation(value = "", nickname = "listJobs", notes = "Get list of all jobs", response = SchedulerJob.class, responseContainer = "List", authorizations = {
        @Authorization(value = "wib-jwt")
    }, tags={ "internal","jobs", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = SchedulerJob.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid parameters", response = Error.class),
        @ApiResponse(code = 401, message = "Invalid credentials", response = Error.class),
        @ApiResponse(code = 403, message = "No permissions", response = Error.class),
        @ApiResponse(code = 404, message = "Unknown job id", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Error", response = Error.class) })
    @ApiImplicitParams({
    })
    @RequestMapping(value = "/api/internal/v1/scheduler/jobs",
        produces = "application/json",
        method = RequestMethod.GET)
    <ResponseEntity<Flux<SchedulerJob>>> listJobs(ServerWebExchange exchange);


    /**
     * POST /api/internal/v1/scheduler/jobs/{jobIdOrUniqueName}/trigger
     * Trigger job by job id or job unique name
     *
     * @param jobIdOrUniqueName the job id or job unique name (required)
     * @return OK (status code 200)
     *         or Invalid parameters (status code 400)
     *         or Invalid credentials (status code 401)
     *         or No permissions (status code 403)
     *         or Unknown job id (status code 404)
     *         or Internal Error (status code 500)
     */
    @ApiVirtual
    @ApiOperation(value = "", nickname = "triggerJob", notes = "Trigger job by job id or job unique name", response = SchedulerJob.class, authorizations = {
        @Authorization(value = "wib-jwt")
    }, tags={ "internal","jobs", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "OK", response = SchedulerJob.class),
        @ApiResponse(code = 400, message = "Invalid parameters", response = Error.class),
        @ApiResponse(code = 401, message = "Invalid credentials", response = Error.class),
        @ApiResponse(code = 403, message = "No permissions", response = Error.class),
        @ApiResponse(code = 404, message = "Unknown job id", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Error", response = Error.class) })
    @ApiImplicitParams({
    })
    @RequestMapping(value = "/api/internal/v1/scheduler/jobs/{jobIdOrUniqueName}/trigger",
        produces = "application/json",
        method = RequestMethod.POST)
    <ResponseEntity<SchedulerJob>> triggerJob(@ApiParam(value = "the job id or job unique name",required=true) @PathVariable("jobIdOrUniqueName") String jobIdOrUniqueName, ServerWebExchange exchange);

}
